import {
  axios_default
} from "./chunk-MJSP37XP.js";
import {
  require_lib
} from "./chunk-ROY4ASSW.js";
import "./chunk-TDJLE6VV.js";
import {
  cloneDeep,
  get,
  has,
  isEqual,
  merge,
  set
} from "./chunk-TY5JZ24U.js";
import {
  computed,
  createSSRApp,
  defineComponent,
  h,
  isReactive,
  markRaw,
  onMounted,
  onUnmounted,
  reactive,
  ref,
  shallowRef,
  watch
} from "./chunk-2L7SCQVK.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@inertiajs/core/dist/index.esm.js
var M = __toESM(require_lib());
function A(r4, e) {
  let t;
  return function(...i) {
    clearTimeout(t), t = setTimeout(() => r4.apply(this, i), e);
  };
}
function P(r4, e) {
  return document.dispatchEvent(new CustomEvent(`inertia:${r4}`, e));
}
var Y = (r4) => P("before", { cancelable: true, detail: { visit: r4 } });
var de = (r4) => P("error", { detail: { errors: r4 } });
var pe = (r4) => P("exception", { cancelable: true, detail: { exception: r4 } });
var he = (r4) => P("finish", { detail: { visit: r4 } });
var me = (r4) => P("invalid", { cancelable: true, detail: { response: r4 } });
var R = (r4) => P("navigate", { detail: { page: r4 } });
var fe = (r4) => P("progress", { detail: { progress: r4 } });
var ge = (r4) => P("start", { detail: { visit: r4 } });
var ve = (r4) => P("success", { detail: { page: r4 } });
var be = (r4, e) => P("prefetched", { detail: { fetchedAt: Date.now(), response: r4.data, visit: e } });
var ye = (r4) => P("prefetching", { detail: { visit: r4 } });
var h2 = class {
  static set(e, t) {
    typeof window < "u" && window.sessionStorage.setItem(e, JSON.stringify(t));
  }
  static get(e) {
    if (typeof window < "u") return JSON.parse(window.sessionStorage.getItem(e) || "null");
  }
  static merge(e, t) {
    let i = this.get(e);
    i === null ? this.set(e, t) : this.set(e, { ...i, ...t });
  }
  static remove(e) {
    typeof window < "u" && window.sessionStorage.removeItem(e);
  }
  static removeNested(e, t) {
    let i = this.get(e);
    i !== null && (delete i[t], this.set(e, i));
  }
  static exists(e) {
    try {
      return this.get(e) !== null;
    } catch {
      return false;
    }
  }
  static clear() {
    typeof window < "u" && window.sessionStorage.clear();
  }
};
h2.locationVisitKey = "inertiaLocationVisit";
var Pe = async (r4) => {
  if (typeof window > "u") throw new Error("Unable to encrypt history");
  let e = Se(), t = await Ee(), i = await je(t);
  if (!i) throw new Error("Unable to encrypt history");
  return await $e(e, i, r4);
};
var q = { key: "historyKey", iv: "historyIv" };
var we = async (r4) => {
  let e = Se(), t = await Ee();
  if (!t) throw new Error("Unable to decrypt history");
  return await Be(e, t, r4);
};
var $e = async (r4, e, t) => {
  if (typeof window > "u") throw new Error("Unable to encrypt history");
  if (typeof window.crypto.subtle > "u") return console.warn("Encryption is not supported in this environment. SSL is required."), Promise.resolve(t);
  let i = new TextEncoder(), n = JSON.stringify(t), o = new Uint8Array(n.length * 3), u = i.encodeInto(n, o);
  return window.crypto.subtle.encrypt({ name: "AES-GCM", iv: r4 }, e, o.subarray(0, u.written));
};
var Be = async (r4, e, t) => {
  if (typeof window.crypto.subtle > "u") return console.warn("Decryption is not supported in this environment. SSL is required."), Promise.resolve(t);
  let i = await window.crypto.subtle.decrypt({ name: "AES-GCM", iv: r4 }, e, t);
  return JSON.parse(new TextDecoder().decode(i));
};
var Se = () => {
  let r4 = h2.get(q.iv);
  if (r4) return new Uint8Array(r4);
  let e = window.crypto.getRandomValues(new Uint8Array(12));
  return h2.set(q.iv, Array.from(e)), e;
};
var Ge = async () => typeof window.crypto.subtle > "u" ? (console.warn("Encryption is not supported in this environment. SSL is required."), Promise.resolve(null)) : window.crypto.subtle.generateKey({ name: "AES-GCM", length: 256 }, true, ["encrypt", "decrypt"]);
var Ke = async (r4) => {
  if (typeof window.crypto.subtle > "u") return console.warn("Encryption is not supported in this environment. SSL is required."), Promise.resolve();
  let e = await window.crypto.subtle.exportKey("raw", r4);
  h2.set(q.key, Array.from(new Uint8Array(e)));
};
var je = async (r4) => {
  if (r4) return r4;
  let e = await Ge();
  return e ? (await Ke(e), e) : null;
};
var Ee = async () => {
  let r4 = h2.get(q.key);
  return r4 ? await window.crypto.subtle.importKey("raw", new Uint8Array(r4), { name: "AES-GCM", length: 256 }, true, ["encrypt", "decrypt"]) : null;
};
var v = class {
  static save() {
    a.saveScrollPositions(Array.from(this.regions()).map((e) => ({ top: e.scrollTop, left: e.scrollLeft })));
  }
  static regions() {
    return document.querySelectorAll("[scroll-region]");
  }
  static reset() {
    typeof window < "u" && window.scrollTo(0, 0), this.regions().forEach((e) => {
      typeof e.scrollTo == "function" ? e.scrollTo(0, 0) : (e.scrollTop = 0, e.scrollLeft = 0);
    }), this.save(), window.location.hash && setTimeout(() => {
      var _a;
      return (_a = document.getElementById(window.location.hash.slice(1))) == null ? void 0 : _a.scrollIntoView();
    });
  }
  static restore(e) {
    this.restoreDocument(), this.regions().forEach((t, i) => {
      let n = e[i];
      n && (typeof t.scrollTo == "function" ? t.scrollTo(n.left, n.top) : (t.scrollTop = n.top, t.scrollLeft = n.left));
    });
  }
  static restoreDocument() {
    let e = a.getDocumentScrollPosition();
    typeof window < "u" && window.scrollTo(e.left, e.top);
  }
  static onScroll(e) {
    let t = e.target;
    typeof t.hasAttribute == "function" && t.hasAttribute("scroll-region") && this.save();
  }
  static onWindowScroll() {
    a.saveDocumentScrollPosition({ top: window.scrollY, left: window.scrollX });
  }
};
function N(r4) {
  return r4 instanceof File || r4 instanceof Blob || r4 instanceof FileList && r4.length > 0 || r4 instanceof FormData && Array.from(r4.values()).some((e) => N(e)) || typeof r4 == "object" && r4 !== null && Object.values(r4).some((e) => N(e));
}
var Z = (r4) => r4 instanceof FormData;
function ee(r4, e = new FormData(), t = null) {
  r4 = r4 || {};
  for (let i in r4) Object.prototype.hasOwnProperty.call(r4, i) && Te(e, Re(t, i), r4[i]);
  return e;
}
function Re(r4, e) {
  return r4 ? r4 + "[" + e + "]" : e;
}
function Te(r4, e, t) {
  if (Array.isArray(t)) return Array.from(t.keys()).forEach((i) => Te(r4, Re(e, i.toString()), t[i]));
  if (t instanceof Date) return r4.append(e, t.toISOString());
  if (t instanceof File) return r4.append(e, t, t.name);
  if (t instanceof Blob) return r4.append(e, t);
  if (typeof t == "boolean") return r4.append(e, t ? "1" : "0");
  if (typeof t == "string") return r4.append(e, t);
  if (typeof t == "number") return r4.append(e, `${t}`);
  if (t == null) return r4.append(e, "");
  ee(t, r4, e);
}
function y(r4) {
  return new URL(r4.toString(), typeof window > "u" ? void 0 : window.location.toString());
}
var xe = (r4, e, t, i, n) => {
  let o = typeof r4 == "string" ? y(r4) : r4;
  if ((N(e) || i) && !Z(e) && (e = ee(e)), Z(e)) return [o, e];
  let [u, p] = qe(t, o, e, n);
  return [y(u), p];
};
function qe(r4, e, t, i = "brackets") {
  let n = /^https?:\/\//.test(e.toString()), o = n || e.toString().startsWith("/"), u = !o && !e.toString().startsWith("#") && !e.toString().startsWith("?"), p = e.toString().includes("?") || r4 === "get" && Object.keys(t).length, d = e.toString().includes("#"), c = new URL(e.toString(), "http://localhost");
  return r4 === "get" && Object.keys(t).length && (c.search = M.stringify(merge(M.parse(c.search, { ignoreQueryPrefix: true }), t), { encodeValuesOnly: true, arrayFormat: i }), t = {}), [[n ? `${c.protocol}//${c.host}` : "", o ? c.pathname : "", u ? c.pathname.substring(1) : "", p ? c.search : "", d ? c.hash : ""].join(""), t];
}
function V(r4) {
  return r4 = new URL(r4.href), r4.hash = "", r4;
}
var te = (r4, e) => {
  r4.hash && !e.hash && V(r4).href === e.href && (e.hash = r4.hash);
};
var I = (r4, e) => V(r4).href === V(e).href;
var re = class {
  constructor() {
    this.componentId = {};
    this.listeners = [];
    this.isFirstPageLoad = true;
    this.cleared = false;
  }
  init({ initialPage: e, swapComponent: t, resolveComponent: i }) {
    return this.page = e, this.swapComponent = t, this.resolveComponent = i, this;
  }
  set(e, { replace: t = false, preserveScroll: i = false, preserveState: n = false } = {}) {
    this.componentId = {};
    let o = this.componentId;
    return e.clearHistory && a.clear(), this.resolve(e.component).then((u) => {
      if (o !== this.componentId) return;
      e.rememberedState ?? (e.rememberedState = {});
      let p = typeof window < "u" ? window.location : new URL(e.url);
      return t = t || I(y(e.url), p), new Promise((d) => {
        t ? a.replaceState(e, () => d(null)) : a.pushState(e, () => d(null));
      }).then(() => {
        let d = !this.isTheSame(e);
        return this.page = e, this.cleared = false, d && this.fireEventsFor("newComponent"), this.isFirstPageLoad && this.fireEventsFor("firstLoad"), this.isFirstPageLoad = false, this.swap({ component: u, page: e, preserveState: n }).then(() => {
          i || v.reset(), w.fireInternalEvent("loadDeferredProps"), t || R(e);
        });
      });
    });
  }
  setQuietly(e, { preserveState: t = false } = {}) {
    return this.resolve(e.component).then((i) => (this.page = e, this.cleared = false, a.setCurrent(e), this.swap({ component: i, page: e, preserveState: t })));
  }
  clear() {
    this.cleared = true;
  }
  isCleared() {
    return this.cleared;
  }
  get() {
    return this.page;
  }
  merge(e) {
    this.page = { ...this.page, ...e };
  }
  setUrlHash(e) {
    this.page.url.includes(e) || (this.page.url += e);
  }
  remember(e) {
    this.page.rememberedState = e;
  }
  swap({ component: e, page: t, preserveState: i }) {
    return this.swapComponent({ component: e, page: t, preserveState: i });
  }
  resolve(e) {
    return Promise.resolve(this.resolveComponent(e));
  }
  isTheSame(e) {
    return this.page.component === e.component;
  }
  on(e, t) {
    return this.listeners.push({ event: e, callback: t }), () => {
      this.listeners = this.listeners.filter((i) => i.event !== e && i.callback !== t);
    };
  }
  fireEventsFor(e) {
    this.listeners.filter((t) => t.event === e).forEach((t) => t.callback());
  }
};
var s = new re();
var C = class {
  constructor() {
    this.items = [];
    this.processingPromise = null;
  }
  add(e) {
    return this.items.push(e), this.process();
  }
  process() {
    return this.processingPromise ?? (this.processingPromise = this.processNext().then(() => {
      this.processingPromise = null;
    })), this.processingPromise;
  }
  processNext() {
    let e = this.items.shift();
    return e ? Promise.resolve(e()).then(() => this.processNext()) : Promise.resolve();
  }
};
var k = typeof window > "u";
var L = new C();
var Ce = !k && /CriOS/.test(window.navigator.userAgent);
var ie = class {
  constructor() {
    this.rememberedState = "rememberedState";
    this.scrollRegions = "scrollRegions";
    this.preserveUrl = false;
    this.current = {};
    this.initialState = null;
  }
  remember(e, t) {
    var _a;
    this.replaceState({ ...s.get(), rememberedState: { ...((_a = s.get()) == null ? void 0 : _a.rememberedState) ?? {}, [t]: e } });
  }
  restore(e) {
    var _a, _b;
    if (!k) return (_b = (_a = this.initialState) == null ? void 0 : _a[this.rememberedState]) == null ? void 0 : _b[e];
  }
  pushState(e, t = null) {
    if (!k) {
      if (this.preserveUrl) {
        t && t();
        return;
      }
      this.current = e, L.add(() => this.getPageData(e).then((i) => {
        let n = () => {
          this.doPushState({ page: i }, e.url), t && t();
        };
        Ce ? setTimeout(n) : n();
      }));
    }
  }
  getPageData(e) {
    return new Promise((t) => e.encryptHistory ? Pe(e).then(t) : t(e));
  }
  processQueue() {
    return L.process();
  }
  decrypt(e = null) {
    var _a;
    if (k) return Promise.resolve(e ?? s.get());
    let t = e ?? ((_a = window.history.state) == null ? void 0 : _a.page);
    return this.decryptPageData(t).then((i) => {
      if (!i) throw new Error("Unable to decrypt history");
      return this.initialState === null ? this.initialState = i ?? void 0 : this.current = i ?? {}, i;
    });
  }
  decryptPageData(e) {
    return e instanceof ArrayBuffer ? we(e) : Promise.resolve(e);
  }
  saveScrollPositions(e) {
    L.add(() => Promise.resolve().then(() => {
      var _a;
      ((_a = window.history.state) == null ? void 0 : _a.page) && this.doReplaceState({ page: window.history.state.page, scrollRegions: e });
    }));
  }
  saveDocumentScrollPosition(e) {
    L.add(() => Promise.resolve().then(() => {
      var _a;
      ((_a = window.history.state) == null ? void 0 : _a.page) && this.doReplaceState({ page: window.history.state.page, documentScrollPosition: e });
    }));
  }
  getScrollRegions() {
    var _a;
    return ((_a = window.history.state) == null ? void 0 : _a.scrollRegions) || [];
  }
  getDocumentScrollPosition() {
    var _a;
    return ((_a = window.history.state) == null ? void 0 : _a.documentScrollPosition) || { top: 0, left: 0 };
  }
  replaceState(e, t = null) {
    if (s.merge(e), !k) {
      if (this.preserveUrl) {
        t && t();
        return;
      }
      this.current = e, L.add(() => this.getPageData(e).then((i) => {
        let n = () => {
          this.doReplaceState({ page: i }, e.url), t && t();
        };
        Ce ? setTimeout(n) : n();
      }));
    }
  }
  doReplaceState(e, t) {
    var _a, _b;
    window.history.replaceState({ ...e, scrollRegions: e.scrollRegions ?? ((_a = window.history.state) == null ? void 0 : _a.scrollRegions), documentScrollPosition: e.documentScrollPosition ?? ((_b = window.history.state) == null ? void 0 : _b.documentScrollPosition) }, "", t);
  }
  doPushState(e, t) {
    window.history.pushState(e, "", t);
  }
  getState(e, t) {
    var _a;
    return ((_a = this.current) == null ? void 0 : _a[e]) ?? t;
  }
  deleteState(e) {
    this.current[e] !== void 0 && (delete this.current[e], this.replaceState(this.current));
  }
  hasAnyState() {
    return !!this.getAllState();
  }
  clear() {
    h2.remove(q.key), h2.remove(q.iv);
  }
  setCurrent(e) {
    this.current = e;
  }
  isValidState(e) {
    return !!e.page;
  }
  getAllState() {
    return this.current;
  }
};
typeof window < "u" && window.history.scrollRestoration && (window.history.scrollRestoration = "manual");
var a = new ie();
var ne = class {
  constructor() {
    this.internalListeners = [];
  }
  init() {
    typeof window < "u" && (window.addEventListener("popstate", this.handlePopstateEvent.bind(this)), window.addEventListener("scroll", A(v.onWindowScroll.bind(v), 100), true)), typeof document < "u" && document.addEventListener("scroll", A(v.onScroll.bind(v), 100), true);
  }
  onGlobalEvent(e, t) {
    let i = (n) => {
      let o = t(n);
      n.cancelable && !n.defaultPrevented && o === false && n.preventDefault();
    };
    return this.registerListener(`inertia:${e}`, i);
  }
  on(e, t) {
    return this.internalListeners.push({ event: e, listener: t }), () => {
      this.internalListeners = this.internalListeners.filter((i) => i.listener !== t);
    };
  }
  onMissingHistoryItem() {
    s.clear(), this.fireInternalEvent("missingHistoryItem");
  }
  fireInternalEvent(e) {
    this.internalListeners.filter((t) => t.event === e).forEach((t) => t.listener());
  }
  registerListener(e, t) {
    return document.addEventListener(e, t), () => document.removeEventListener(e, t);
  }
  handlePopstateEvent(e) {
    let t = e.state || null;
    if (t === null) {
      let i = y(s.get().url);
      i.hash = window.location.hash, a.replaceState({ ...s.get(), url: i.href }), v.reset();
      return;
    }
    if (!a.isValidState(t)) return this.onMissingHistoryItem();
    a.decrypt(t.page).then((i) => {
      s.setQuietly(i, { preserveState: false }).then(() => {
        v.restore(a.getScrollRegions()), R(s.get());
      });
    }).catch(() => {
      this.onMissingHistoryItem();
    });
  }
};
var w = new ne();
var se = class {
  constructor() {
    this.type = this.resolveType();
  }
  resolveType() {
    return typeof window > "u" ? "navigate" : window.performance && window.performance.getEntriesByType && window.performance.getEntriesByType("navigation").length > 0 ? window.performance.getEntriesByType("navigation")[0].type : "navigate";
  }
  get() {
    return this.type;
  }
  isBackForward() {
    return this.type === "back_forward";
  }
  isReload() {
    return this.type === "reload";
  }
};
var $ = new se();
var B = class {
  static handle() {
    this.clearRememberedStateOnReload(), [this.handleBackForward, this.handleLocation, this.handleDefault].find((t) => t.bind(this)());
  }
  static clearRememberedStateOnReload() {
    $.isReload() && a.deleteState(a.rememberedState);
  }
  static handleBackForward() {
    if (!$.isBackForward() || !a.hasAnyState()) return false;
    let e = a.getScrollRegions();
    return a.decrypt().then((t) => {
      s.set(t, { preserveScroll: true, preserveState: true }).then(() => {
        v.restore(e), R(s.get());
      });
    }).catch(() => {
      w.onMissingHistoryItem();
    }), true;
  }
  static handleLocation() {
    if (!h2.exists(h2.locationVisitKey)) return false;
    let e = h2.get(h2.locationVisitKey) || {};
    return h2.remove(h2.locationVisitKey), typeof window < "u" && s.setUrlHash(window.location.hash), a.decrypt(s.get()).then(() => {
      let t = a.getState(a.rememberedState, {}), i = a.getScrollRegions();
      s.remember(t), s.set(s.get(), { preserveScroll: e.preserveScroll, preserveState: true }).then(() => {
        e.preserveScroll && v.restore(i), R(s.get());
      });
    }).catch(() => {
      w.onMissingHistoryItem();
    }), true;
  }
  static handleDefault() {
    typeof window < "u" && s.setUrlHash(window.location.hash), s.set(s.get(), { preserveScroll: true, preserveState: true }).then(() => {
      $.isReload() && v.restore(a.getScrollRegions()), R(s.get());
    });
  }
};
var G = class {
  constructor(e, t, i) {
    this.id = null;
    this.throttle = false;
    this.keepAlive = false;
    this.cbCount = 0;
    this.keepAlive = i.keepAlive ?? false, this.cb = t, this.interval = e, (i.autoStart ?? true) && this.start();
  }
  stop() {
    this.id && clearInterval(this.id);
  }
  start() {
    typeof window > "u" || (this.stop(), this.id = window.setInterval(() => {
      (!this.throttle || this.cbCount % 10 === 0) && this.cb(), this.throttle && this.cbCount++;
    }, this.interval));
  }
  isInBackground(e) {
    this.throttle = this.keepAlive ? false : e, this.throttle && (this.cbCount = 0);
  }
};
var oe = class {
  constructor() {
    this.polls = [];
    this.setupVisibilityListener();
  }
  add(e, t, i) {
    let n = new G(e, t, i);
    return this.polls.push(n), { stop: () => n.stop(), start: () => n.start() };
  }
  clear() {
    this.polls.forEach((e) => e.stop()), this.polls = [];
  }
  setupVisibilityListener() {
    typeof document > "u" || document.addEventListener("visibilitychange", () => {
      this.polls.forEach((e) => e.isInBackground(document.hidden));
    }, false);
  }
};
var Ae = new oe();
var ae = (r4, e, t) => {
  if (r4 === e) return true;
  for (let i in r4) if (!t.includes(i) && r4[i] !== e[i] && !Xe(r4[i], e[i])) return false;
  return true;
};
var Xe = (r4, e) => {
  switch (typeof r4) {
    case "object":
      return ae(r4, e, []);
    case "function":
      return r4.toString() === e.toString();
    default:
      return r4 === e;
  }
};
var Je = { ms: 1, s: 1e3, m: 6e4, h: 36e5, d: 864e5 };
var le = (r4) => {
  if (typeof r4 == "number") return r4;
  for (let [e, t] of Object.entries(Je)) if (r4.endsWith(e)) return parseFloat(r4) * t;
  return parseInt(r4);
};
var ce = class {
  constructor() {
    this.cached = [];
    this.inFlightRequests = [];
    this.removalTimers = [];
    this.currentUseId = null;
  }
  add(e, t, { cacheFor: i }) {
    if (this.findInFlight(e)) return Promise.resolve();
    let o = this.findCached(e);
    if (!e.fresh && o && o.staleTimestamp > Date.now()) return Promise.resolve();
    let [u, p] = this.extractStaleValues(i), d = new Promise((c, l) => {
      t({ ...e, onCancel: () => {
        this.remove(e), e.onCancel(), l();
      }, onError: (f) => {
        this.remove(e), e.onError(f), l();
      }, onPrefetching(f) {
        e.onPrefetching(f);
      }, onPrefetched(f, _) {
        e.onPrefetched(f, _);
      }, onPrefetchResponse(f) {
        c(f);
      } });
    }).then((c) => (this.remove(e), this.cached.push({ params: { ...e }, staleTimestamp: Date.now() + u, response: d, singleUse: i === 0, timestamp: Date.now(), inFlight: false }), this.scheduleForRemoval(e, p), this.inFlightRequests = this.inFlightRequests.filter((l) => !this.paramsAreEqual(l.params, e)), c.handlePrefetch(), c));
    return this.inFlightRequests.push({ params: { ...e }, response: d, staleTimestamp: null, inFlight: true }), d;
  }
  removeAll() {
    this.cached = [], this.removalTimers.forEach((e) => {
      clearTimeout(e.timer);
    }), this.removalTimers = [];
  }
  remove(e) {
    this.cached = this.cached.filter((t) => !this.paramsAreEqual(t.params, e)), this.clearTimer(e);
  }
  extractStaleValues(e) {
    let [t, i] = this.cacheForToStaleAndExpires(e);
    return [le(t), le(i)];
  }
  cacheForToStaleAndExpires(e) {
    if (!Array.isArray(e)) return [e, e];
    switch (e.length) {
      case 0:
        return [0, 0];
      case 1:
        return [e[0], e[0]];
      default:
        return [e[0], e[1]];
    }
  }
  clearTimer(e) {
    let t = this.removalTimers.find((i) => this.paramsAreEqual(i.params, e));
    t && (clearTimeout(t.timer), this.removalTimers = this.removalTimers.filter((i) => i !== t));
  }
  scheduleForRemoval(e, t) {
    if (!(typeof window > "u") && (this.clearTimer(e), t > 0)) {
      let i = window.setTimeout(() => this.remove(e), t);
      this.removalTimers.push({ params: e, timer: i });
    }
  }
  get(e) {
    return this.findCached(e) || this.findInFlight(e);
  }
  use(e, t) {
    let i = `${t.url.pathname}-${Date.now()}-${Math.random().toString(36).substring(7)}`;
    return this.currentUseId = i, e.response.then((n) => {
      if (this.currentUseId === i) return n.mergeParams({ ...t, onPrefetched: () => {
      } }), this.removeSingleUseItems(t), n.handle();
    });
  }
  removeSingleUseItems(e) {
    this.cached = this.cached.filter((t) => this.paramsAreEqual(t.params, e) ? !t.singleUse : true);
  }
  findCached(e) {
    return this.cached.find((t) => this.paramsAreEqual(t.params, e)) || null;
  }
  findInFlight(e) {
    return this.inFlightRequests.find((t) => this.paramsAreEqual(t.params, e)) || null;
  }
  paramsAreEqual(e, t) {
    return ae(e, t, ["showProgress", "replace", "prefetch", "onBefore", "onStart", "onProgress", "onFinish", "onCancel", "onSuccess", "onError", "onPrefetched", "onCancelToken", "onPrefetching", "async"]);
  }
};
var T = new ce();
var K = class r {
  constructor(e) {
    this.callbacks = [];
    if (!e.prefetch) this.params = e;
    else {
      let t = { onBefore: this.wrapCallback(e, "onBefore"), onStart: this.wrapCallback(e, "onStart"), onProgress: this.wrapCallback(e, "onProgress"), onFinish: this.wrapCallback(e, "onFinish"), onCancel: this.wrapCallback(e, "onCancel"), onSuccess: this.wrapCallback(e, "onSuccess"), onError: this.wrapCallback(e, "onError"), onCancelToken: this.wrapCallback(e, "onCancelToken"), onPrefetched: this.wrapCallback(e, "onPrefetched"), onPrefetching: this.wrapCallback(e, "onPrefetching") };
      this.params = { ...e, ...t, onPrefetchResponse: e.onPrefetchResponse || (() => {
      }) };
    }
  }
  static create(e) {
    return new r(e);
  }
  data() {
    return this.params.method === "get" ? null : this.params.data;
  }
  queryParams() {
    return this.params.method === "get" ? this.params.data : {};
  }
  isPartial() {
    return this.params.only.length > 0 || this.params.except.length > 0 || this.params.reset.length > 0;
  }
  onCancelToken(e) {
    this.params.onCancelToken({ cancel: e });
  }
  markAsFinished() {
    this.params.completed = true, this.params.cancelled = false, this.params.interrupted = false;
  }
  markAsCancelled({ cancelled: e = true, interrupted: t = false }) {
    this.params.onCancel(), this.params.completed = false, this.params.cancelled = e, this.params.interrupted = t;
  }
  wasCancelledAtAll() {
    return this.params.cancelled || this.params.interrupted;
  }
  onFinish() {
    this.params.onFinish(this.params);
  }
  onStart() {
    this.params.onStart(this.params);
  }
  onPrefetching() {
    this.params.onPrefetching(this.params);
  }
  onPrefetchResponse(e) {
    this.params.onPrefetchResponse && this.params.onPrefetchResponse(e);
  }
  all() {
    return this.params;
  }
  headers() {
    let e = { ...this.params.headers };
    this.isPartial() && (e["X-Inertia-Partial-Component"] = s.get().component);
    let t = this.params.only.concat(this.params.reset);
    return t.length > 0 && (e["X-Inertia-Partial-Data"] = t.join(",")), this.params.except.length > 0 && (e["X-Inertia-Partial-Except"] = this.params.except.join(",")), this.params.reset.length > 0 && (e["X-Inertia-Reset"] = this.params.reset.join(",")), this.params.errorBag && this.params.errorBag.length > 0 && (e["X-Inertia-Error-Bag"] = this.params.errorBag), e;
  }
  setPreserveOptions(e) {
    this.params.preserveScroll = this.resolvePreserveOption(this.params.preserveScroll, e), this.params.preserveState = this.resolvePreserveOption(this.params.preserveState, e);
  }
  runCallbacks() {
    this.callbacks.forEach(({ name: e, args: t }) => {
      this.params[e](...t);
    });
  }
  merge(e) {
    this.params = { ...this.params, ...e };
  }
  wrapCallback(e, t) {
    return (...i) => {
      this.recordCallback(t, i), e[t](...i);
    };
  }
  recordCallback(e, t) {
    this.callbacks.push({ name: e, args: t });
  }
  resolvePreserveOption(e, t) {
    return typeof e == "function" ? e(t) : e === "errors" ? Object.keys(t.props.errors || {}).length > 0 : e;
  }
};
var Ve = { modal: null, listener: null, show(r4) {
  typeof r4 == "object" && (r4 = `All Inertia requests must receive a valid Inertia response, however a plain JSON response was received.<hr>${JSON.stringify(r4)}`);
  let e = document.createElement("html");
  e.innerHTML = r4, e.querySelectorAll("a").forEach((i) => i.setAttribute("target", "_top")), this.modal = document.createElement("div"), this.modal.style.position = "fixed", this.modal.style.width = "100vw", this.modal.style.height = "100vh", this.modal.style.padding = "50px", this.modal.style.boxSizing = "border-box", this.modal.style.backgroundColor = "rgba(0, 0, 0, .6)", this.modal.style.zIndex = 2e5, this.modal.addEventListener("click", () => this.hide());
  let t = document.createElement("iframe");
  if (t.style.backgroundColor = "white", t.style.borderRadius = "5px", t.style.width = "100%", t.style.height = "100%", this.modal.appendChild(t), document.body.prepend(this.modal), document.body.style.overflow = "hidden", !t.contentWindow) throw new Error("iframe not yet ready.");
  t.contentWindow.document.open(), t.contentWindow.document.write(e.outerHTML), t.contentWindow.document.close(), this.listener = this.hideOnEscape.bind(this), document.addEventListener("keydown", this.listener);
}, hide() {
  this.modal.outerHTML = "", this.modal = null, document.body.style.overflow = "visible", document.removeEventListener("keydown", this.listener);
}, hideOnEscape(r4) {
  r4.keyCode === 27 && this.hide();
} };
var Qe = new C();
var O = class r2 {
  constructor(e, t, i) {
    this.requestParams = e;
    this.response = t;
    this.originatingPage = i;
  }
  static create(e, t, i) {
    return new r2(e, t, i);
  }
  async handlePrefetch() {
    I(this.requestParams.all().url, window.location) && this.handle();
  }
  async handle() {
    return Qe.add(() => this.process());
  }
  async process() {
    if (this.requestParams.all().prefetch) return this.requestParams.all().prefetch = false, this.requestParams.all().onPrefetched(this.response, this.requestParams.all()), be(this.response, this.requestParams.all()), Promise.resolve();
    if (this.requestParams.runCallbacks(), !this.isInertiaResponse()) return this.handleNonInertiaResponse();
    await a.processQueue(), a.preserveUrl = this.requestParams.all().preserveUrl, await this.setPage();
    let e = s.get().props.errors || {};
    if (Object.keys(e).length > 0) {
      let t = this.getScopedErrors(e);
      return de(t), this.requestParams.all().onError(t);
    }
    ve(s.get()), await this.requestParams.all().onSuccess(s.get()), a.preserveUrl = false;
  }
  mergeParams(e) {
    this.requestParams.merge(e);
  }
  async handleNonInertiaResponse() {
    if (this.isLocationVisit()) {
      let t = y(this.getHeader("x-inertia-location"));
      return te(this.requestParams.all().url, t), this.locationVisit(t);
    }
    let e = { ...this.response, data: this.getDataFromResponse(this.response.data) };
    if (me(e)) return Ve.show(e.data);
  }
  isInertiaResponse() {
    return this.hasHeader("x-inertia");
  }
  hasStatus(e) {
    return this.response.status === e;
  }
  getHeader(e) {
    return this.response.headers[e];
  }
  hasHeader(e) {
    return this.getHeader(e) !== void 0;
  }
  isLocationVisit() {
    return this.hasStatus(409) && this.hasHeader("x-inertia-location");
  }
  locationVisit(e) {
    try {
      if (h2.set(h2.locationVisitKey, { preserveScroll: this.requestParams.all().preserveScroll === true }), typeof window > "u") return;
      I(window.location, e) ? window.location.reload() : window.location.href = e.href;
    } catch {
      return false;
    }
  }
  async setPage() {
    let e = this.getDataFromResponse(this.response.data);
    return this.shouldSetPage(e) ? (this.mergeProps(e), await this.setRememberedState(e), this.requestParams.setPreserveOptions(e), e.url = a.preserveUrl ? s.get().url : this.pageUrl(e), s.set(e, { replace: this.requestParams.all().replace, preserveScroll: this.requestParams.all().preserveScroll, preserveState: this.requestParams.all().preserveState })) : Promise.resolve();
  }
  getDataFromResponse(e) {
    if (typeof e != "string") return e;
    try {
      return JSON.parse(e);
    } catch {
      return e;
    }
  }
  shouldSetPage(e) {
    if (!this.requestParams.all().async || this.originatingPage.component !== e.component) return true;
    if (this.originatingPage.component !== s.get().component) return false;
    let t = y(this.originatingPage.url), i = y(s.get().url);
    return t.origin === i.origin && t.pathname === i.pathname;
  }
  pageUrl(e) {
    let t = y(e.url);
    return te(this.requestParams.all().url, t), t.pathname + t.search + t.hash;
  }
  mergeProps(e) {
    if (!this.requestParams.isPartial() || e.component !== s.get().component) return;
    let t = e.mergeProps || [], i = e.deepMergeProps || [];
    t.forEach((n) => {
      let o = e.props[n];
      Array.isArray(o) ? e.props[n] = [...s.get().props[n] || [], ...o] : typeof o == "object" && o !== null && (e.props[n] = { ...s.get().props[n] || [], ...o });
    }), i.forEach((n) => {
      let o = e.props[n], u = s.get().props[n], p = (d, c) => Array.isArray(c) ? [...Array.isArray(d) ? d : [], ...c] : typeof c == "object" && c !== null ? Object.keys(c).reduce((l, f) => (l[f] = p(d ? d[f] : void 0, c[f]), l), { ...d }) : c;
      e.props[n] = p(u, o);
    }), e.props = { ...s.get().props, ...e.props };
  }
  async setRememberedState(e) {
    let t = await a.getState(a.rememberedState, {});
    this.requestParams.all().preserveState && t && e.component === s.get().component && (e.rememberedState = t);
  }
  getScopedErrors(e) {
    return this.requestParams.all().errorBag ? e[this.requestParams.all().errorBag || ""] || {} : e;
  }
};
var U = class r3 {
  constructor(e, t) {
    this.page = t;
    this.requestHasFinished = false;
    this.requestParams = K.create(e), this.cancelToken = new AbortController();
  }
  static create(e, t) {
    return new r3(e, t);
  }
  async send() {
    this.requestParams.onCancelToken(() => this.cancel({ cancelled: true })), ge(this.requestParams.all()), this.requestParams.onStart(), this.requestParams.all().prefetch && (this.requestParams.onPrefetching(), ye(this.requestParams.all()));
    let e = this.requestParams.all().prefetch;
    return axios_default({ method: this.requestParams.all().method, url: V(this.requestParams.all().url).href, data: this.requestParams.data(), params: this.requestParams.queryParams(), signal: this.cancelToken.signal, headers: this.getHeaders(), onUploadProgress: this.onProgress.bind(this), responseType: "text" }).then((t) => (this.response = O.create(this.requestParams, t, this.page), this.response.handle())).catch((t) => (t == null ? void 0 : t.response) ? (this.response = O.create(this.requestParams, t.response, this.page), this.response.handle()) : Promise.reject(t)).catch((t) => {
      if (!axios_default.isCancel(t) && pe(t)) return Promise.reject(t);
    }).finally(() => {
      this.finish(), e && this.response && this.requestParams.onPrefetchResponse(this.response);
    });
  }
  finish() {
    this.requestParams.wasCancelledAtAll() || (this.requestParams.markAsFinished(), this.fireFinishEvents());
  }
  fireFinishEvents() {
    this.requestHasFinished || (this.requestHasFinished = true, he(this.requestParams.all()), this.requestParams.onFinish());
  }
  cancel({ cancelled: e = false, interrupted: t = false }) {
    this.requestHasFinished || (this.cancelToken.abort(), this.requestParams.markAsCancelled({ cancelled: e, interrupted: t }), this.fireFinishEvents());
  }
  onProgress(e) {
    this.requestParams.data() instanceof FormData && (e.percentage = e.progress ? Math.round(e.progress * 100) : 0, fe(e), this.requestParams.all().onProgress(e));
  }
  getHeaders() {
    let e = { ...this.requestParams.headers(), Accept: "text/html, application/xhtml+xml", "X-Requested-With": "XMLHttpRequest", "X-Inertia": true };
    return s.get().version && (e["X-Inertia-Version"] = s.get().version), e;
  }
};
var D = class {
  constructor({ maxConcurrent: e, interruptible: t }) {
    this.requests = [];
    this.maxConcurrent = e, this.interruptible = t;
  }
  send(e) {
    this.requests.push(e), e.send().then(() => {
      this.requests = this.requests.filter((t) => t !== e);
    });
  }
  interruptInFlight() {
    this.cancel({ interrupted: true }, false);
  }
  cancelInFlight() {
    this.cancel({ cancelled: true }, true);
  }
  cancel({ cancelled: e = false, interrupted: t = false } = {}, i) {
    var _a;
    if (!this.shouldCancel(i)) return;
    (_a = this.requests.shift()) == null ? void 0 : _a.cancel({ interrupted: t, cancelled: e });
  }
  shouldCancel(e) {
    return e ? true : this.interruptible && this.requests.length >= this.maxConcurrent;
  }
};
var j = class {
  constructor() {
    this.syncRequestStream = new D({ maxConcurrent: 1, interruptible: true });
    this.asyncRequestStream = new D({ maxConcurrent: 1 / 0, interruptible: false });
  }
  init({ initialPage: e, resolveComponent: t, swapComponent: i }) {
    s.init({ initialPage: e, resolveComponent: t, swapComponent: i }), B.handle(), w.init(), w.on("missingHistoryItem", () => {
      typeof window < "u" && this.visit(window.location.href, { preserveState: true, preserveScroll: true, replace: true });
    }), w.on("loadDeferredProps", () => {
      this.loadDeferredProps();
    });
  }
  get(e, t = {}, i = {}) {
    return this.visit(e, { ...i, method: "get", data: t });
  }
  post(e, t = {}, i = {}) {
    return this.visit(e, { preserveState: true, ...i, method: "post", data: t });
  }
  put(e, t = {}, i = {}) {
    return this.visit(e, { preserveState: true, ...i, method: "put", data: t });
  }
  patch(e, t = {}, i = {}) {
    return this.visit(e, { preserveState: true, ...i, method: "patch", data: t });
  }
  delete(e, t = {}) {
    return this.visit(e, { preserveState: true, ...t, method: "delete" });
  }
  reload(e = {}) {
    if (!(typeof window > "u")) return this.visit(window.location.href, { ...e, preserveScroll: true, preserveState: true, async: true, headers: { ...e.headers || {}, "Cache-Control": "no-cache" } });
  }
  remember(e, t = "default") {
    a.remember(e, t);
  }
  restore(e = "default") {
    return a.restore(e);
  }
  on(e, t) {
    return typeof window > "u" ? () => {
    } : w.onGlobalEvent(e, t);
  }
  cancel() {
    this.syncRequestStream.cancelInFlight();
  }
  cancelAll() {
    this.asyncRequestStream.cancelInFlight(), this.syncRequestStream.cancelInFlight();
  }
  poll(e, t = {}, i = {}) {
    return Ae.add(e, () => this.reload(t), { autoStart: i.autoStart ?? true, keepAlive: i.keepAlive ?? false });
  }
  visit(e, t = {}) {
    let i = this.getPendingVisit(e, { ...t, showProgress: t.showProgress ?? !t.async }), n = this.getVisitEvents(t);
    if (n.onBefore(i) === false || !Y(i)) return;
    let o = i.async ? this.asyncRequestStream : this.syncRequestStream;
    o.interruptInFlight(), !s.isCleared() && !i.preserveUrl && v.save();
    let u = { ...i, ...n }, p = T.get(u);
    p ? (W(p.inFlight), T.use(p, u)) : (W(true), o.send(U.create(u, s.get())));
  }
  getCached(e, t = {}) {
    return T.findCached(this.getPrefetchParams(e, t));
  }
  flush(e, t = {}) {
    T.remove(this.getPrefetchParams(e, t));
  }
  flushAll() {
    T.removeAll();
  }
  getPrefetching(e, t = {}) {
    return T.findInFlight(this.getPrefetchParams(e, t));
  }
  prefetch(e, t = {}, { cacheFor: i = 3e4 }) {
    if (t.method !== "get") throw new Error("Prefetch requests must use the GET method");
    let n = this.getPendingVisit(e, { ...t, async: true, showProgress: false, prefetch: true }), o = n.url.origin + n.url.pathname + n.url.search, u = window.location.origin + window.location.pathname + window.location.search;
    if (o === u) return;
    let p = this.getVisitEvents(t);
    if (p.onBefore(n) === false || !Y(n)) return;
    X(), this.asyncRequestStream.interruptInFlight();
    let d = { ...n, ...p };
    new Promise((l) => {
      let f = () => {
        s.get() ? l() : setTimeout(f, 50);
      };
      f();
    }).then(() => {
      T.add(d, (l) => {
        this.asyncRequestStream.send(U.create(l, s.get()));
      }, { cacheFor: i });
    });
  }
  clearHistory() {
    a.clear();
  }
  decryptHistory() {
    return a.decrypt();
  }
  replace(e) {
    this.clientVisit(e, { replace: true });
  }
  push(e) {
    this.clientVisit(e);
  }
  clientVisit(e, { replace: t = false } = {}) {
    let i = s.get(), n = typeof e.props == "function" ? e.props(i.props) : e.props ?? i.props;
    s.set({ ...i, ...e, props: n }, { replace: t, preserveScroll: e.preserveScroll, preserveState: e.preserveState });
  }
  getPrefetchParams(e, t) {
    return { ...this.getPendingVisit(e, { ...t, async: true, showProgress: false, prefetch: true }), ...this.getVisitEvents(t) };
  }
  getPendingVisit(e, t, i = {}) {
    let n = { method: "get", data: {}, replace: false, preserveScroll: false, preserveState: false, only: [], except: [], headers: {}, errorBag: "", forceFormData: false, queryStringArrayFormat: "brackets", async: false, showProgress: true, fresh: false, reset: [], preserveUrl: false, prefetch: false, ...t }, [o, u] = xe(e, n.data, n.method, n.forceFormData, n.queryStringArrayFormat);
    return { cancelled: false, completed: false, interrupted: false, ...n, ...i, url: o, data: u };
  }
  getVisitEvents(e) {
    return { onCancelToken: e.onCancelToken || (() => {
    }), onBefore: e.onBefore || (() => {
    }), onStart: e.onStart || (() => {
    }), onProgress: e.onProgress || (() => {
    }), onFinish: e.onFinish || (() => {
    }), onCancel: e.onCancel || (() => {
    }), onSuccess: e.onSuccess || (() => {
    }), onError: e.onError || (() => {
    }), onPrefetched: e.onPrefetched || (() => {
    }), onPrefetching: e.onPrefetching || (() => {
    }) };
  }
  loadDeferredProps() {
    var _a;
    let e = (_a = s.get()) == null ? void 0 : _a.deferredProps;
    e && Object.entries(e).forEach(([t, i]) => {
      this.reload({ only: i });
    });
  }
};
var ze = { buildDOMElement(r4) {
  let e = document.createElement("template");
  e.innerHTML = r4;
  let t = e.content.firstChild;
  if (!r4.startsWith("<script ")) return t;
  let i = document.createElement("script");
  return i.innerHTML = t.innerHTML, t.getAttributeNames().forEach((n) => {
    i.setAttribute(n, t.getAttribute(n) || "");
  }), i;
}, isInertiaManagedElement(r4) {
  return r4.nodeType === Node.ELEMENT_NODE && r4.getAttribute("inertia") !== null;
}, findMatchingElementIndex(r4, e) {
  let t = r4.getAttribute("inertia");
  return t !== null ? e.findIndex((i) => i.getAttribute("inertia") === t) : -1;
}, update: A(function(r4) {
  let e = r4.map((i) => this.buildDOMElement(i));
  Array.from(document.head.childNodes).filter((i) => this.isInertiaManagedElement(i)).forEach((i) => {
    var _a, _b;
    let n = this.findMatchingElementIndex(i, e);
    if (n === -1) {
      (_a = i == null ? void 0 : i.parentNode) == null ? void 0 : _a.removeChild(i);
      return;
    }
    let o = e.splice(n, 1)[0];
    o && !i.isEqualNode(o) && ((_b = i == null ? void 0 : i.parentNode) == null ? void 0 : _b.replaceChild(o, i));
  }), e.forEach((i) => document.head.appendChild(i));
}, 1) };
function Ie(r4, e, t) {
  let i = {}, n = 0;
  function o() {
    let l = n += 1;
    return i[l] = [], l.toString();
  }
  function u(l) {
    l === null || Object.keys(i).indexOf(l) === -1 || (delete i[l], c());
  }
  function p(l, f = []) {
    l !== null && Object.keys(i).indexOf(l) > -1 && (i[l] = f), c();
  }
  function d() {
    let l = e(""), f = { ...l ? { title: `<title inertia="">${l}</title>` } : {} }, _ = Object.values(i).reduce((S, E2) => S.concat(E2), []).reduce((S, E2) => {
      if (E2.indexOf("<") === -1) return S;
      if (E2.indexOf("<title ") === 0) {
        let H = E2.match(/(<title [^>]+>)(.*?)(<\/title>)/);
        return S.title = H ? `${H[1]}${e(H[2])}${H[3]}` : E2, S;
      }
      let ue = E2.match(/ inertia="[^"]+"/);
      return ue ? S[ue[0]] = E2 : S[Object.keys(S).length] = E2, S;
    }, f);
    return Object.values(_);
  }
  function c() {
    r4 ? t(d()) : ze.update(d());
  }
  return c(), { forceUpdate: c, createProvider: function() {
    let l = o();
    return { update: (f) => p(l, f), disconnect: () => u(l) };
  } };
}
var m = "nprogress";
var g = { minimum: 0.08, easing: "linear", positionUsing: "translate3d", speed: 200, trickle: true, trickleSpeed: 200, showSpinner: true, barSelector: '[role="bar"]', spinnerSelector: '[role="spinner"]', parent: "body", color: "#29d", includeCSS: true, template: ['<div class="bar" role="bar">', '<div class="peg"></div>', "</div>", '<div class="spinner" role="spinner">', '<div class="spinner-icon"></div>', "</div>"].join("") };
var x = null;
var _e = (r4) => {
  Object.assign(g, r4), g.includeCSS && it(g.color);
};
var Q = (r4) => {
  let e = Le();
  r4 = He(r4, g.minimum, 1), x = r4 === 1 ? null : r4;
  let t = Ze(!e), i = t.querySelector(g.barSelector), n = g.speed, o = g.easing;
  t.offsetWidth, rt((u) => {
    let p = g.positionUsing === "translate3d" ? { transition: `all ${n}ms ${o}`, transform: `translate3d(${J(r4)}%,0,0)` } : g.positionUsing === "translate" ? { transition: `all ${n}ms ${o}`, transform: `translate(${J(r4)}%,0)` } : { marginLeft: `${J(r4)}%` };
    for (let d in p) i.style[d] = p[d];
    if (r4 !== 1) return setTimeout(u, n);
    t.style.transition = "none", t.style.opacity = "1", t.offsetWidth, setTimeout(() => {
      t.style.transition = `all ${n}ms linear`, t.style.opacity = "0", setTimeout(() => {
        De(), u();
      }, n);
    }, n);
  });
};
var Le = () => typeof x == "number";
var ke = () => {
  x || Q(0);
  let r4 = function() {
    setTimeout(function() {
      x && (Oe(), r4());
    }, g.trickleSpeed);
  };
  g.trickle && r4();
};
var Ye = (r4) => {
  !r4 && !x || (Oe(0.3 + 0.5 * Math.random()), Q(1));
};
var Oe = (r4) => {
  let e = x;
  if (e === null) return ke();
  if (!(e > 1)) return r4 = typeof r4 == "number" ? r4 : (() => {
    let t = { 0.1: [0, 0.2], 0.04: [0.2, 0.5], 0.02: [0.5, 0.8], 5e-3: [0.8, 0.99] };
    for (let i in t) if (e >= t[i][0] && e < t[i][1]) return parseFloat(i);
    return 0;
  })(), Q(He(e + r4, 0, 0.994));
};
var Ze = (r4) => {
  var _a;
  if (et()) return document.getElementById(m);
  document.documentElement.classList.add(`${m}-busy`);
  let e = document.createElement("div");
  e.id = m, e.innerHTML = g.template;
  let t = e.querySelector(g.barSelector), i = r4 ? "-100" : J(x || 0), n = Ue();
  return t.style.transition = "all 0 linear", t.style.transform = `translate3d(${i}%,0,0)`, g.showSpinner || ((_a = e.querySelector(g.spinnerSelector)) == null ? void 0 : _a.remove()), n !== document.body && n.classList.add(`${m}-custom-parent`), n.appendChild(e), e;
};
var Ue = () => tt(g.parent) ? g.parent : document.querySelector(g.parent);
var De = () => {
  var _a;
  document.documentElement.classList.remove(`${m}-busy`), Ue().classList.remove(`${m}-custom-parent`), (_a = document.getElementById(m)) == null ? void 0 : _a.remove();
};
var et = () => document.getElementById(m) !== null;
var tt = (r4) => typeof HTMLElement == "object" ? r4 instanceof HTMLElement : r4 && typeof r4 == "object" && r4.nodeType === 1 && typeof r4.nodeName == "string";
function He(r4, e, t) {
  return r4 < e ? e : r4 > t ? t : r4;
}
var J = (r4) => (-1 + r4) * 100;
var rt = /* @__PURE__ */ (() => {
  let r4 = [], e = () => {
    let t = r4.shift();
    t && t(e);
  };
  return (t) => {
    r4.push(t), r4.length === 1 && e();
  };
})();
var it = (r4) => {
  let e = document.createElement("style");
  e.textContent = `
    #${m} {
      pointer-events: none;
    }

    #${m} .bar {
      background: ${r4};

      position: fixed;
      z-index: 1031;
      top: 0;
      left: 0;

      width: 100%;
      height: 2px;
    }

    #${m} .peg {
      display: block;
      position: absolute;
      right: 0px;
      width: 100px;
      height: 100%;
      box-shadow: 0 0 10px ${r4}, 0 0 5px ${r4};
      opacity: 1.0;

      transform: rotate(3deg) translate(0px, -4px);
    }

    #${m} .spinner {
      display: block;
      position: fixed;
      z-index: 1031;
      top: 15px;
      right: 15px;
    }

    #${m} .spinner-icon {
      width: 18px;
      height: 18px;
      box-sizing: border-box;

      border: solid 2px transparent;
      border-top-color: ${r4};
      border-left-color: ${r4};
      border-radius: 50%;

      animation: ${m}-spinner 400ms linear infinite;
    }

    .${m}-custom-parent {
      overflow: hidden;
      position: relative;
    }

    .${m}-custom-parent #${m} .spinner,
    .${m}-custom-parent #${m} .bar {
      position: absolute;
    }

    @keyframes ${m}-spinner {
      0%   { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `, document.head.appendChild(e);
};
var F = (() => {
  if (typeof document > "u") return null;
  let r4 = document.createElement("style");
  return r4.innerHTML = `#${m} { display: none; }`, r4;
})();
var nt = () => {
  if (F && document.head.contains(F)) return document.head.removeChild(F);
};
var st = () => {
  F && !document.head.contains(F) && document.head.appendChild(F);
};
var b = { configure: _e, isStarted: Le, done: Ye, set: Q, remove: De, start: ke, status: x, show: nt, hide: st };
var z = 0;
var W = (r4 = false) => {
  z = Math.max(0, z - 1), (r4 || z === 0) && b.show();
};
var X = () => {
  z++, b.hide();
};
function ot(r4) {
  document.addEventListener("inertia:start", (e) => at(e, r4)), document.addEventListener("inertia:progress", lt);
}
function at(r4, e) {
  r4.detail.visit.showProgress || X();
  let t = setTimeout(() => b.start(), e);
  document.addEventListener("inertia:finish", (i) => ct(i, t), { once: true });
}
function lt(r4) {
  var _a;
  b.isStarted() && ((_a = r4.detail.progress) == null ? void 0 : _a.percentage) && b.set(Math.max(b.status, r4.detail.progress.percentage / 100 * 0.9));
}
function ct(r4, e) {
  clearTimeout(e), b.isStarted() && (r4.detail.visit.completed ? b.done() : r4.detail.visit.interrupted ? b.set(0) : r4.detail.visit.cancelled && (b.done(), b.remove()));
}
function Ne({ delay: r4 = 250, color: e = "#29d", includeCSS: t = true, showSpinner: i = false } = {}) {
  ot(r4), b.configure({ showSpinner: i, includeCSS: t, color: e });
}
function Me(r4) {
  let e = r4.currentTarget.tagName.toLowerCase() === "a";
  return !(r4.target && (r4 == null ? void 0 : r4.target).isContentEditable || r4.defaultPrevented || e && r4.altKey || e && r4.ctrlKey || e && r4.metaKey || e && r4.shiftKey || e && "button" in r4 && r4.button !== 0);
}
var Wr = new j();

// node_modules/@inertiajs/vue3/dist/index.esm.js
var G2 = { created() {
  if (!this.$options.remember) return;
  Array.isArray(this.$options.remember) && (this.$options.remember = { data: this.$options.remember }), typeof this.$options.remember == "string" && (this.$options.remember = { data: [this.$options.remember] }), typeof this.$options.remember.data == "string" && (this.$options.remember = { data: [this.$options.remember.data] });
  let e = this.$options.remember.key instanceof Function ? this.$options.remember.key.call(this) : this.$options.remember.key, r4 = Wr.restore(e), n = this.$options.remember.data.filter((o) => !(this[o] !== null && typeof this[o] == "object" && this[o].__rememberable === false)), s2 = (o) => this[o] !== null && typeof this[o] == "object" && typeof this[o].__remember == "function" && typeof this[o].__restore == "function";
  n.forEach((o) => {
    this[o] !== void 0 && r4 !== void 0 && r4[o] !== void 0 && (s2(o) ? this[o].__restore(r4[o]) : this[o] = r4[o]), this.$watch(o, () => {
      Wr.remember(n.reduce((a2, l) => ({ ...a2, [l]: cloneDeep(s2(l) ? this[l].__remember() : this[l]) }), {}), e);
    }, { immediate: true, deep: true });
  });
} };
var V2 = G2;
function x2(e, r4) {
  let n = typeof e == "string" ? e : null, s2 = (typeof e == "string" ? r4 : e) ?? {}, o = n ? Wr.restore(n) : null, a2 = typeof s2 == "function" ? cloneDeep(s2()) : cloneDeep(s2), l = null, f = null, m2 = (t) => t, v2 = reactive({ ...o ? o.data : cloneDeep(a2), isDirty: false, errors: o ? o.errors : {}, hasErrors: false, processing: false, progress: null, wasSuccessful: false, recentlySuccessful: false, data() {
    return Object.keys(a2).reduce((t, i) => set(t, i, get(this, i)), {});
  }, transform(t) {
    return m2 = t, this;
  }, defaults(t, i) {
    if (typeof s2 == "function") throw new Error("You cannot call `defaults()` when using a function to define your form data.");
    return typeof t > "u" ? (a2 = cloneDeep(this.data()), this.isDirty = false) : a2 = typeof t == "string" ? set(cloneDeep(a2), t, i) : Object.assign({}, cloneDeep(a2), t), this;
  }, reset(...t) {
    let i = typeof s2 == "function" ? cloneDeep(s2()) : cloneDeep(a2), d = cloneDeep(i);
    return t.length === 0 ? (a2 = d, Object.assign(this, i)) : t.filter((p) => has(d, p)).forEach((p) => {
      set(a2, p, get(d, p)), set(this, p, get(i, p));
    }), this;
  }, setError(t, i) {
    return Object.assign(this.errors, typeof t == "string" ? { [t]: i } : t), this.hasErrors = Object.keys(this.errors).length > 0, this;
  }, clearErrors(...t) {
    return this.errors = Object.keys(this.errors).reduce((i, d) => ({ ...i, ...t.length > 0 && !t.includes(d) ? { [d]: this.errors[d] } : {} }), {}), this.hasErrors = Object.keys(this.errors).length > 0, this;
  }, submit(...t) {
    let i = typeof t[0] == "object", d = i ? t[0].method : t[0], p = i ? t[0].url : t[1], u = (i ? t[1] : t[2]) ?? {}, F2 = m2(this.data()), T2 = { ...u, onCancelToken: (c) => {
      if (l = c, u.onCancelToken) return u.onCancelToken(c);
    }, onBefore: (c) => {
      if (this.wasSuccessful = false, this.recentlySuccessful = false, clearTimeout(f), u.onBefore) return u.onBefore(c);
    }, onStart: (c) => {
      if (this.processing = true, u.onStart) return u.onStart(c);
    }, onProgress: (c) => {
      if (this.progress = c, u.onProgress) return u.onProgress(c);
    }, onSuccess: async (c) => {
      this.processing = false, this.progress = null, this.clearErrors(), this.wasSuccessful = true, this.recentlySuccessful = true, f = setTimeout(() => this.recentlySuccessful = false, 2e3);
      let w2 = u.onSuccess ? await u.onSuccess(c) : null;
      return a2 = cloneDeep(this.data()), this.isDirty = false, w2;
    }, onError: (c) => {
      if (this.processing = false, this.progress = null, this.clearErrors().setError(c), u.onError) return u.onError(c);
    }, onCancel: () => {
      if (this.processing = false, this.progress = null, u.onCancel) return u.onCancel();
    }, onFinish: (c) => {
      if (this.processing = false, this.progress = null, l = null, u.onFinish) return u.onFinish(c);
    } };
    d === "delete" ? Wr.delete(p, { ...T2, data: F2 }) : Wr[d](p, F2, T2);
  }, get(t, i) {
    this.submit("get", t, i);
  }, post(t, i) {
    this.submit("post", t, i);
  }, put(t, i) {
    this.submit("put", t, i);
  }, patch(t, i) {
    this.submit("patch", t, i);
  }, delete(t, i) {
    this.submit("delete", t, i);
  }, cancel() {
    l && l.cancel();
  }, __rememberable: n === null, __remember() {
    return { data: this.data(), errors: this.errors };
  }, __restore(t) {
    Object.assign(this, t.data), this.setError(t.errors);
  } });
  return watch(v2, (t) => {
    v2.isDirty = !isEqual(v2.data(), a2), n && Wr.remember(cloneDeep(t.__remember()), n);
  }, { immediate: true, deep: true }), v2;
}
var y2 = ref(null);
var h3 = ref(null);
var I2 = shallowRef(null);
var A2 = ref(null);
var E = null;
var ie2 = defineComponent({ name: "Inertia", props: { initialPage: { type: Object, required: true }, initialComponent: { type: Object, required: false }, resolveComponent: { type: Function, required: false }, titleCallback: { type: Function, required: false, default: (e) => e }, onHeadUpdate: { type: Function, required: false, default: () => () => {
} } }, setup({ initialPage: e, initialComponent: r4, resolveComponent: n, titleCallback: s2, onHeadUpdate: o }) {
  y2.value = r4 ? markRaw(r4) : null, h3.value = e, A2.value = null;
  let a2 = typeof window > "u";
  return E = Ie(a2, s2, o), a2 || (Wr.init({ initialPage: e, resolveComponent: n, swapComponent: async (l) => {
    y2.value = markRaw(l.component), h3.value = l.page, A2.value = l.preserveState ? A2.value : Date.now();
  } }), Wr.on("navigate", () => E.forceUpdate())), () => {
    if (y2.value) {
      y2.value.inheritAttrs = !!y2.value.inheritAttrs;
      let l = h(y2.value, { ...h3.value.props, key: A2.value });
      return I2.value && (y2.value.layout = I2.value, I2.value = null), y2.value.layout ? typeof y2.value.layout == "function" ? y2.value.layout(h, l) : (Array.isArray(y2.value.layout) ? y2.value.layout : [y2.value.layout]).concat(l).reverse().reduce((f, m2) => (m2.inheritAttrs = !!m2.inheritAttrs, h(m2, { ...h3.value.props }, () => f))) : l;
    }
  };
} });
var B2 = ie2;
var q2 = { install(e) {
  Wr.form = x2, Object.defineProperty(e.config.globalProperties, "$inertia", { get: () => Wr }), Object.defineProperty(e.config.globalProperties, "$page", { get: () => h3.value }), Object.defineProperty(e.config.globalProperties, "$headManager", { get: () => E }), e.mixin(V2);
} };
function ae2() {
  return reactive({ props: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.props;
  }), url: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.url;
  }), component: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.component;
  }), version: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.version;
  }), clearHistory: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.clearHistory;
  }), deferredProps: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.deferredProps;
  }), mergeProps: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.mergeProps;
  }), deepMergeProps: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.deepMergeProps;
  }), rememberedState: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.rememberedState;
  }), encryptHistory: computed(() => {
    var _a;
    return (_a = h3.value) == null ? void 0 : _a.encryptHistory;
  }) });
}
async function K2({ id: e = "app", resolve: r4, setup: n, title: s2, progress: o = {}, page: a2, render: l }) {
  let f = typeof window > "u", m2 = f ? null : document.getElementById(e), v2 = a2 || JSON.parse(m2.dataset.page), t = (p) => Promise.resolve(r4(p)).then((u) => u.default || u), i = [], d = await Promise.all([t(v2.component), Wr.decryptHistory().catch(() => {
  })]).then(([p]) => n({ el: m2, App: B2, props: { initialPage: v2, initialComponent: p, resolveComponent: t, titleCallback: s2, onHeadUpdate: f ? (u) => i = u : null }, plugin: q2 }));
  if (!f && o && Ne(o), f) {
    let p = await l(createSSRApp({ render: () => h("div", { id: e, "data-page": JSON.stringify(v2), innerHTML: d ? l(d) : "" }) }));
    return { head: i, body: p };
  }
}
var me2 = defineComponent({ name: "Deferred", props: { data: { type: [String, Array], required: true } }, render() {
  let e = Array.isArray(this.$props.data) ? this.$props.data : [this.$props.data];
  if (!this.$slots.fallback) throw new Error("`<Deferred>` requires a `<template #fallback>` slot");
  return e.every((r4) => this.$page.props[r4] !== void 0) ? this.$slots.default() : this.$slots.fallback();
} });
var he2 = defineComponent({ props: { title: { type: String, required: false } }, data() {
  return { provider: this.$headManager.createProvider() };
}, beforeUnmount() {
  this.provider.disconnect();
}, methods: { isUnaryTag(e) {
  return ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"].indexOf(e.type) > -1;
}, renderTagStart(e) {
  e.props = e.props || {}, e.props.inertia = e.props["head-key"] !== void 0 ? e.props["head-key"] : "";
  let r4 = Object.keys(e.props).reduce((n, s2) => {
    let o = e.props[s2];
    return ["key", "head-key"].includes(s2) ? n : o === "" ? n + ` ${s2}` : n + ` ${s2}="${o}"`;
  }, "");
  return `<${e.type}${r4}>`;
}, renderTagChildren(e) {
  return typeof e.children == "string" ? e.children : e.children.reduce((r4, n) => r4 + this.renderTag(n), "");
}, isFunctionNode(e) {
  return typeof e.type == "function";
}, isComponentNode(e) {
  return typeof e.type == "object";
}, isCommentNode(e) {
  return /(comment|cmt)/i.test(e.type.toString());
}, isFragmentNode(e) {
  return /(fragment|fgt|symbol\(\))/i.test(e.type.toString());
}, isTextNode(e) {
  return /(text|txt)/i.test(e.type.toString());
}, renderTag(e) {
  if (this.isTextNode(e)) return e.children;
  if (this.isFragmentNode(e)) return "";
  if (this.isCommentNode(e)) return "";
  let r4 = this.renderTagStart(e);
  return e.children && (r4 += this.renderTagChildren(e)), this.isUnaryTag(e) || (r4 += `</${e.type}>`), r4;
}, addTitleElement(e) {
  return this.title && !e.find((r4) => r4.startsWith("<title")) && e.push(`<title inertia>${this.title}</title>`), e;
}, renderNodes(e) {
  return this.addTitleElement(e.flatMap((r4) => this.resolveNode(r4)).map((r4) => this.renderTag(r4)).filter((r4) => r4));
}, resolveNode(e) {
  return this.isFunctionNode(e) ? this.resolveNode(e.type()) : this.isComponentNode(e) ? (console.warn("Using components in the <Head> component is not supported."), []) : this.isTextNode(e) && e.children ? e : this.isFragmentNode(e) && e.children ? e.children.flatMap((r4) => this.resolveNode(r4)) : this.isCommentNode(e) ? [] : e;
} }, render() {
  this.provider.update(this.renderNodes(this.$slots.default ? this.$slots.default() : []));
} });
var ge2 = he2;
var Te2 = defineComponent({ name: "Link", props: { as: { type: String, default: "a" }, data: { type: Object, default: () => ({}) }, href: { type: [String, Object], required: true }, method: { type: String, default: "get" }, replace: { type: Boolean, default: false }, preserveScroll: { type: Boolean, default: false }, preserveState: { type: Boolean, default: null }, only: { type: Array, default: () => [] }, except: { type: Array, default: () => [] }, headers: { type: Object, default: () => ({}) }, queryStringArrayFormat: { type: String, default: "brackets" }, async: { type: Boolean, default: false }, prefetch: { type: [Boolean, String, Array], default: false }, cacheFor: { type: [Number, String, Array], default: 0 }, onStart: { type: Function, default: (e) => {
} }, onProgress: { type: Function, default: () => {
} }, onFinish: { type: Function, default: () => {
} }, onBefore: { type: Function, default: () => {
} }, onCancel: { type: Function, default: () => {
} }, onSuccess: { type: Function, default: () => {
} }, onError: { type: Function, default: () => {
} }, onCancelToken: { type: Function, default: () => {
} } }, setup(e, { slots: r4, attrs: n }) {
  let s2 = ref(0), o = ref(null), a2 = e.prefetch === true ? ["hover"] : e.prefetch === false ? [] : Array.isArray(e.prefetch) ? e.prefetch : [e.prefetch], l = e.cacheFor !== 0 ? e.cacheFor : a2.length === 1 && a2[0] === "click" ? 0 : 3e4;
  onMounted(() => {
    a2.includes("mount") && F2();
  }), onUnmounted(() => {
    clearTimeout(o.value);
  });
  let f = typeof e.href == "object" ? e.href.method : e.method.toLowerCase(), m2 = f !== "get" ? "button" : e.as.toLowerCase(), v2 = computed(() => qe(f, typeof e.href == "object" ? e.href.url : e.href || "", e.data, e.queryStringArrayFormat)), t = computed(() => v2.value[0]), i = computed(() => v2.value[1]), d = computed(() => ({ a: { href: t.value }, button: { type: "button" } })), p = { data: i.value, method: f, replace: e.replace, preserveScroll: e.preserveScroll, preserveState: e.preserveState ?? f !== "get", only: e.only, except: e.except, headers: e.headers, async: e.async }, u = { ...p, onCancelToken: e.onCancelToken, onBefore: e.onBefore, onStart: (g2) => {
    s2.value++, e.onStart(g2);
  }, onProgress: e.onProgress, onFinish: (g2) => {
    s2.value--, e.onFinish(g2);
  }, onCancel: e.onCancel, onSuccess: e.onSuccess, onError: e.onError }, F2 = () => {
    Wr.prefetch(t.value, p, { cacheFor: l });
  }, T2 = { onClick: (g2) => {
    Me(g2) && (g2.preventDefault(), Wr.visit(t.value, u));
  } }, c = { onMouseenter: () => {
    o.value = setTimeout(() => {
      F2();
    }, 75);
  }, onMouseleave: () => {
    clearTimeout(o.value);
  }, onClick: T2.onClick }, w2 = { onMousedown: (g2) => {
    Me(g2) && (g2.preventDefault(), F2());
  }, onMouseup: (g2) => {
    g2.preventDefault(), Wr.visit(t.value, u);
  }, onClick: (g2) => {
    Me(g2) && g2.preventDefault();
  } };
  return () => h(m2, { ...n, ...d.value[m2] || {}, "data-loading": s2.value > 0 ? "" : void 0, ...a2.includes("hover") ? c : a2.includes("click") ? w2 : T2 }, r4);
} });
var Se2 = Te2;
function W2(e, r4 = {}, n = { keepAlive: false, autoStart: true }) {
  let { stop: s2, start: o } = Wr.poll(e, r4, { ...n, autoStart: false });
  return onMounted(() => {
    (n.autoStart ?? true) && o();
  }), onUnmounted(() => {
    s2();
  }), { stop: s2, start: o };
}
function J2(e = {}) {
  let r4 = ref(false), n = ref(null), s2 = ref(false), o = typeof window > "u" ? null : Wr.getCached(window.location.pathname, e), a2 = typeof window > "u" ? null : Wr.getPrefetching(window.location.pathname, e);
  n.value = (o == null ? void 0 : o.staleTimestamp) || null, r4.value = a2 !== null, s2.value = o !== null;
  let l, f;
  return onMounted(() => {
    f = Wr.on("prefetching", (m2) => {
      m2.detail.visit.url.pathname === window.location.pathname && (r4.value = true);
    }), l = Wr.on("prefetched", (m2) => {
      m2.detail.visit.url.pathname === window.location.pathname && (r4.value = false, s2.value = true);
    });
  }), onUnmounted(() => {
    l(), f();
  }), { lastUpdatedAt: n, isPrefetching: r4, isPrefetched: s2, flush: () => Wr.flush(window.location.pathname, e) };
}
function Q2(e, r4) {
  if (typeof e == "object" && e !== null && e.__rememberable === false) return e;
  let n = Wr.restore(r4), s2 = isReactive(e) ? reactive : ref, o = typeof e.__remember == "function" && typeof e.__restore == "function", a2 = s2(n === void 0 ? e : o ? e.__restore(n) : n);
  return watch(a2, (l) => {
    Wr.remember(cloneDeep(o ? e.__remember() : l), r4);
  }, { immediate: true, deep: true }), a2;
}
var Re2 = defineComponent({ name: "WhenVisible", props: { data: { type: [String, Array] }, params: { type: Object }, buffer: { type: Number, default: 0 }, as: { type: String, default: "div" }, always: { type: Boolean, default: false } }, data() {
  return { loaded: false, fetching: false, observer: null };
}, unmounted() {
  var _a;
  (_a = this.observer) == null ? void 0 : _a.disconnect();
}, mounted() {
  this.observer = new IntersectionObserver((e) => {
    if (!e[0].isIntersecting || (this.$props.always || this.observer.disconnect(), this.fetching)) return;
    this.fetching = true;
    let r4 = this.getReloadParams();
    Wr.reload({ ...r4, onStart: (n) => {
      var _a;
      this.fetching = true, (_a = r4.onStart) == null ? void 0 : _a.call(r4, n);
    }, onFinish: (n) => {
      var _a;
      this.loaded = true, this.fetching = false, (_a = r4.onFinish) == null ? void 0 : _a.call(r4, n);
    } });
  }, { rootMargin: `${this.$props.buffer}px` }), this.observer.observe(this.$el.nextSibling);
}, methods: { getReloadParams() {
  if (this.$props.data) return { only: Array.isArray(this.$props.data) ? this.$props.data : [this.$props.data] };
  if (!this.$props.params) throw new Error("You must provide either a `data` or `params` prop.");
  return this.$props.params;
} }, render() {
  let e = [];
  return (this.$props.always || !this.loaded) && e.push(h(this.$props.as)), this.loaded ? this.$slots.default && e.push(this.$slots.default()) : e.push(this.$slots.fallback ? this.$slots.fallback() : null), e;
} });
export {
  me2 as Deferred,
  ge2 as Head,
  Se2 as Link,
  Re2 as WhenVisible,
  K2 as createInertiaApp,
  Wr as router,
  x2 as useForm,
  ae2 as usePage,
  W2 as usePoll,
  J2 as usePrefetch,
  Q2 as useRemember
};
/*! Bundled license information:

@inertiajs/core/dist/index.esm.js:
  (* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
   * @license MIT *)
*/
//# sourceMappingURL=@inertiajs_vue3.js.map
